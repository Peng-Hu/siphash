//======================================================================
//
// tb_siphash_core.v
// -----------------
// Testbench for the SipHash hash function core.
//
//
// Copyright (c) 2012, Secworks Sweden AB
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with the
//    distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//======================================================================

//------------------------------------------------------------------
// Compiler directives.
//------------------------------------------------------------------
`timescale 1ns/10ps

module tb_siphash_core();

  // Test values from the reference code.
  short_vectors00 = 64'h310e0edd47db6f72;
  short_vectors01 = 64'hfd67dc93c539f874;
  short_vectors02 = 64'h5a4fa9d909806c0d;
  short_vectors03 = 64'h2d7efbd796666785;
  short_vectors04 = 64'hb7877127e09427cf;
  short_vectors05 = 64'h8da699cd64557618;
  short_vectors06 = 64'hcee3fe586e46c9cb;
  short_vectors07 = 64'h37d1018bf50002ab;
  short_vectors08 = 64'h6224939a79f5f593;
  short_vectors09 = 64'hb0e4a90bdf82009e;
  short_vectors10 = 64'hf3b9dd94c5bb5d7a;
  short_vectors11 = 64'ha7ad6b22462fb3f4;
  short_vectors12 = 64'hfbe50e86bc8f1e75;
  short_vectors13 = 64'h903d84c02756ea14;
  short_vectors14 = 64'heef27a8e90ca23f7;
  short_vectors15 = 64'he545be4961ca29a1;
  short_vectors16 = 64'hdb9bc2577fcc2a3f;
  short_vectors17 = 64'h9447be2cf5e99a69;
  short_vectors18 = 64'h9cd38d96f0b3c14b;
  short_vectors19 = 64'hbd6179a71dc96dbb;
  short_vectors20 = 64'h98eea21af25cd6be;
  short_vectors21 = 64'hc7673b2eb0cbf2d0;
  short_vectors22 = 64'h883ea3e395675393;
  short_vectors23 = 64'hc8ce5ccd8c030ca8;
  short_vectors24 = 64'h94af49f6c650adb8;
  short_vectors25 = 64'heab8858ade92e1bc;
  short_vectors26 = 64'hf315bb5bb835d817;
  short_vectors27 = 64'hadcf6b0763612e2f;
  short_vectors28 = 64'ha5c91da7acaa4dde;
  short_vectors29 = 64'h716595876650a2a6;
  short_vectors30 = 64'h28ef495c53a387ad;
  short_vectors31 = 64'h42c341d8fa92d832;
  short_vectors32 = 64'hce7cf2722f512771;
  short_vectors33 = 64'he37859f94623f3a7;
  short_vectors34 = 64'h381205bb1ab0e012;
  short_vectors35 = 64'hae97a10fd434e015;
  short_vectors36 = 64'hb4a31508beff4d31;
  short_vectors37 = 64'h81396229f0907902;
  short_vectors38 = 64'h4d0cf49ee5d4dcca;
  short_vectors39 = 64'h5c73336a76d8bf9a;
  short_vectors40 = 64'hd0a704536ba93e0e;
  short_vectors41 = 64'h925958fcd6420cad;
  short_vectors42 = 64'ha915c29bc8067318;
  short_vectors43 = 64'h952b79f3bc0aa6d4;
  short_vectors44 = 64'hf21df2e41d4535f9;
  short_vectors45 = 64'h87577519048f53a9;
  short_vectors46 = 64'h10a56cf5dfcd9adb;
  short_vectors47 = 64'heb75095ccd986cd0;
  short_vectors48 = 64'h51a9cb9ecba312e6;
  short_vectors49 = 64'h96afadfc2ce666c7;
  short_vectors50 = 64'h72fe52975a4364ee;
  short_vectors51 = 64'h5a1645b276d592a1;
  short_vectors52 = 64'hb274cb8ebf87870a;
  short_vectors53 = 64'h6f9bb4203de7b381;
  short_vectors54 = 64'heaecb2a30b22a87f;
  short_vectors55 = 64'h9924a43cc1315724;
  short_vectors56 = 64'hbd838d3aafbf8db7;
  short_vectors57 = 64'h0b1a2a3265d51aea;
  short_vectors58 = 64'h135079a3231ce660;
  short_vectors59 = 64'h932b2846e4d70666;
  short_vectors60 = 64'he1915f5cb1eca46c;
  short_vectors61 = 64'hf325965ca16d629f;
  short_vectors62 = 64'h575ff28e60381be5;
  short_vectors63 = 64'h724506eb4c328a95;

// #else
// { 0xa3, 0x81, 0x7f, 0x04, 0xba, 0x25, 0xa8, 0xe6, 0x6d, 0xf6, 0x72, 0x14, 0xc7, 0x55, 0x02, 0x93 },
// { 0xda, 0x87, 0xc1, 0xd8, 0x6b, 0x99, 0xaf, 0x44, 0x34, 0x76, 0x59, 0x11, 0x9b, 0x22, 0xfc, 0x45 },
// { 0x81, 0x77, 0x22, 0x8d, 0xa4, 0xa4, 0x5d, 0xc7, 0xfc, 0xa3, 0x8b, 0xde, 0xf6, 0x0a, 0xff, 0xe4 },
// { 0x9c, 0x70, 0xb6, 0x0c, 0x52, 0x67, 0xa9, 0x4e, 0x5f, 0x33, 0xb6, 0xb0, 0x29, 0x85, 0xed, 0x51 },
// { 0xf8, 0x81, 0x64, 0xc1, 0x2d, 0x9c, 0x8f, 0xaf, 0x7d, 0x0f, 0x6e, 0x7c, 0x7b, 0xcd, 0x55, 0x79 },
// { 0x13, 0x68, 0x87, 0x59, 0x80, 0x77, 0x6f, 0x88, 0x54, 0x52, 0x7a, 0x07, 0x69, 0x0e, 0x96, 0x27 },
// { 0x14, 0xee, 0xca, 0x33, 0x8b, 0x20, 0x86, 0x13, 0x48, 0x5e, 0xa0, 0x30, 0x8f, 0xd7, 0xa1, 0x5e },
// { 0xa1, 0xf1, 0xeb, 0xbe, 0xd8, 0xdb, 0xc1, 0x53, 0xc0, 0xb8, 0x4a, 0xa6, 0x1f, 0xf0, 0x82, 0x39 },
// { 0x3b, 0x62, 0xa9, 0xba, 0x62, 0x58, 0xf5, 0x61, 0x0f, 0x83, 0xe2, 0x64, 0xf3, 0x14, 0x97, 0xb4 },
// { 0x26, 0x44, 0x99, 0x06, 0x0a, 0xd9, 0xba, 0xab, 0xc4, 0x7f, 0x8b, 0x02, 0xbb, 0x6d, 0x71, 0xed },
// { 0x00, 0x11, 0x0d, 0xc3, 0x78, 0x14, 0x69, 0x56, 0xc9, 0x54, 0x47, 0xd3, 0xf3, 0xd0, 0xfb, 0xba },
// { 0x01, 0x51, 0xc5, 0x68, 0x38, 0x6b, 0x66, 0x77, 0xa2, 0xb4, 0xdc, 0x6f, 0x81, 0xe5, 0xdc, 0x18 },
// { 0xd6, 0x26, 0xb2, 0x66, 0x90, 0x5e, 0xf3, 0x58, 0x82, 0x63, 0x4d, 0xf6, 0x85, 0x32, 0xc1, 0x25 },
// { 0x98, 0x69, 0xe2, 0x47, 0xe9, 0xc0, 0x8b, 0x10, 0xd0, 0x29, 0x93, 0x4f, 0xc4, 0xb9, 0x52, 0xf7 },
// { 0x31, 0xfc, 0xef, 0xac, 0x66, 0xd7, 0xde, 0x9c, 0x7e, 0xc7, 0x48, 0x5f, 0xe4, 0x49, 0x49, 0x02 },
// { 0x54, 0x93, 0xe9, 0x99, 0x33, 0xb0, 0xa8, 0x11, 0x7e, 0x08, 0xec, 0x0f, 0x97, 0xcf, 0xc3, 0xd9 },
// { 0x6e, 0xe2, 0xa4, 0xca, 0x67, 0xb0, 0x54, 0xbb, 0xfd, 0x33, 0x15, 0xbf, 0x85, 0x23, 0x05, 0x77 },
// { 0x47, 0x3d, 0x06, 0xe8, 0x73, 0x8d, 0xb8, 0x98, 0x54, 0xc0, 0x66, 0xc4, 0x7a, 0xe4, 0x77, 0x40 },
// { 0xa4, 0x26, 0xe5, 0xe4, 0x23, 0xbf, 0x48, 0x85, 0x29, 0x4d, 0xa4, 0x81, 0xfe, 0xae, 0xf7, 0x23 },
// { 0x78, 0x01, 0x77, 0x31, 0xcf, 0x65, 0xfa, 0xb0, 0x74, 0xd5, 0x20, 0x89, 0x52, 0x51, 0x2e, 0xb1 },
// { 0x9e, 0x25, 0xfc, 0x83, 0x3f, 0x22, 0x90, 0x73, 0x3e, 0x93, 0x44, 0xa5, 0xe8, 0x38, 0x39, 0xeb },
// { 0x56, 0x8e, 0x49, 0x5a, 0xbe, 0x52, 0x5a, 0x21, 0x8a, 0x22, 0x14, 0xcd, 0x3e, 0x07, 0x1d, 0x12 },
// { 0x4a, 0x29, 0xb5, 0x45, 0x52, 0xd1, 0x6b, 0x9a, 0x46, 0x9c, 0x10, 0x52, 0x8e, 0xff, 0x0a, 0xae },
// { 0xc9, 0xd1, 0x84, 0xdd, 0xd5, 0xa9, 0xf5, 0xe0, 0xcf, 0x8c, 0xe2, 0x9a, 0x9a, 0xbf, 0x69, 0x1c },
// { 0x2d, 0xb4, 0x79, 0xae, 0x78, 0xbd, 0x50, 0xd8, 0x88, 0x2a, 0x8a, 0x17, 0x8a, 0x61, 0x32, 0xad },
// { 0x8e, 0xce, 0x5f, 0x04, 0x2d, 0x5e, 0x44, 0x7b, 0x50, 0x51, 0xb9, 0xea, 0xcb, 0x8d, 0x8f, 0x6f },
// { 0x9c, 0x0b, 0x53, 0xb4, 0xb3, 0xc3, 0x07, 0xe8, 0x7e, 0xae, 0xe0, 0x86, 0x78, 0x14, 0x1f, 0x66 },
// { 0xab, 0xf2, 0x48, 0xaf, 0x69, 0xa6, 0xea, 0xe4, 0xbf, 0xd3, 0xeb, 0x2f, 0x12, 0x9e, 0xeb, 0x94 },
// { 0x06, 0x64, 0xda, 0x16, 0x68, 0x57, 0x4b, 0x88, 0xb9, 0x35, 0xf3, 0x02, 0x73, 0x58, 0xae, 0xf4 },
// { 0xaa, 0x4b, 0x9d, 0xc4, 0xbf, 0x33, 0x7d, 0xe9, 0x0c, 0xd4, 0xfd, 0x3c, 0x46, 0x7c, 0x6a, 0xb7 },
// { 0xea, 0x5c, 0x7f, 0x47, 0x1f, 0xaf, 0x6b, 0xde, 0x2b, 0x1a, 0xd7, 0xd4, 0x68, 0x6d, 0x22, 0x87 },
// { 0x29, 0x39, 0xb0, 0x18, 0x32, 0x23, 0xfa, 0xfc, 0x17, 0x23, 0xde, 0x4f, 0x52, 0xc4, 0x3d, 0x35 },
// { 0x7c, 0x39, 0x56, 0xca, 0x5e, 0xea, 0xfc, 0x3e, 0x36, 0x3e, 0x9d, 0x55, 0x65, 0x46, 0xeb, 0x68 },
// { 0x77, 0xc6, 0x07, 0x71, 0x46, 0xf0, 0x1c, 0x32, 0xb6, 0xb6, 0x9d, 0x5f, 0x4e, 0xa9, 0xff, 0xcf },
// { 0x37, 0xa6, 0x98, 0x6c, 0xb8, 0x84, 0x7e, 0xdf, 0x09, 0x25, 0xf0, 0xf1, 0x30, 0x9b, 0x54, 0xde },
// { 0xa7, 0x05, 0xf0, 0xe6, 0x9d, 0xa9, 0xa8, 0xf9, 0x07, 0x24, 0x1a, 0x2e, 0x92, 0x3c, 0x8c, 0xc8 },
// { 0x3d, 0xc4, 0x7d, 0x1f, 0x29, 0xc4, 0x48, 0x46, 0x1e, 0x9e, 0x76, 0xed, 0x90, 0x4f, 0x67, 0x11 },
// { 0x0d, 0x62, 0xbf, 0x01, 0xe6, 0xfc, 0x0e, 0x1a, 0x0d, 0x3c, 0x47, 0x51, 0xc5, 0xd3, 0x69, 0x2b },
// { 0x8c, 0x03, 0x46, 0x8b, 0xca, 0x7c, 0x66, 0x9e, 0xe4, 0xfd, 0x5e, 0x08, 0x4b, 0xbe, 0xe7, 0xb5 },
// { 0x52, 0x8a, 0x5b, 0xb9, 0x3b, 0xaf, 0x2c, 0x9c, 0x44, 0x73, 0xcc, 0xe5, 0xd0, 0xd2, 0x2b, 0xd9 },
// { 0xdf, 0x6a, 0x30, 0x1e, 0x95, 0xc9, 0x5d, 0xad, 0x97, 0xae, 0x0c, 0xc8, 0xc6, 0x91, 0x3b, 0xd8 },
// { 0x80, 0x11, 0x89, 0x90, 0x2c, 0x85, 0x7f, 0x39, 0xe7, 0x35, 0x91, 0x28, 0x5e, 0x70, 0xb6, 0xdb },
// { 0xe6, 0x17, 0x34, 0x6a, 0xc9, 0xc2, 0x31, 0xbb, 0x36, 0x50, 0xae, 0x34, 0xcc, 0xca, 0x0c, 0x5b },
// { 0x27, 0xd9, 0x34, 0x37, 0xef, 0xb7, 0x21, 0xaa, 0x40, 0x18, 0x21, 0xdc, 0xec, 0x5a, 0xdf, 0x89 },
// { 0x89, 0x23, 0x7d, 0x9d, 0xed, 0x9c, 0x5e, 0x78, 0xd8, 0xb1, 0xc9, 0xb1, 0x66, 0xcc, 0x73, 0x42 },
// { 0x4a, 0x6d, 0x80, 0x91, 0xbf, 0x5e, 0x7d, 0x65, 0x11, 0x89, 0xfa, 0x94, 0xa2, 0x50, 0xb1, 0x4c },
// { 0x0e, 0x33, 0xf9, 0x60, 0x55, 0xe7, 0xae, 0x89, 0x3f, 0xfc, 0x0e, 0x3d, 0xcf, 0x49, 0x29, 0x02 },
// { 0xe6, 0x1c, 0x43, 0x2b, 0x72, 0x0b, 0x19, 0xd1, 0x8e, 0xc8, 0xd8, 0x4b, 0xdc, 0x63, 0x15, 0x1b },
// { 0xf7, 0xe5, 0xae, 0xf5, 0x49, 0xf7, 0x82, 0xcf, 0x37, 0x90, 0x55, 0xa6, 0x08, 0x26, 0x9b, 0x16 },
// { 0x43, 0x8d, 0x03, 0x0f, 0xd0, 0xb7, 0xa5, 0x4f, 0xa8, 0x37, 0xf2, 0xad, 0x20, 0x1a, 0x64, 0x03 },
// { 0xa5, 0x90, 0xd3, 0xee, 0x4f, 0xbf, 0x04, 0xe3, 0x24, 0x7e, 0x0d, 0x27, 0xf2, 0x86, 0x42, 0x3f },
// { 0x5f, 0xe2, 0xc1, 0xa1, 0x72, 0xfe, 0x93, 0xc4, 0xb1, 0x5c, 0xd3, 0x7c, 0xae, 0xf9, 0xf5, 0x38 },
// { 0x2c, 0x97, 0x32, 0x5c, 0xbd, 0x06, 0xb3, 0x6e, 0xb2, 0x13, 0x3d, 0xd0, 0x8b, 0x3a, 0x01, 0x7c },
// { 0x92, 0xc8, 0x14, 0x22, 0x7a, 0x6b, 0xca, 0x94, 0x9f, 0xf0, 0x65, 0x9f, 0x00, 0x2a, 0xd3, 0x9e },
// { 0xdc, 0xe8, 0x50, 0x11, 0x0b, 0xd8, 0x32, 0x8c, 0xfb, 0xd5, 0x08, 0x41, 0xd6, 0x91, 0x1d, 0x87 },
// { 0x67, 0xf1, 0x49, 0x84, 0xc7, 0xda, 0x79, 0x12, 0x48, 0xe3, 0x2b, 0xb5, 0x92, 0x25, 0x83, 0xda },
// { 0x19, 0x38, 0xf2, 0xcf, 0x72, 0xd5, 0x4e, 0xe9, 0x7e, 0x94, 0x16, 0x6f, 0xa9, 0x1d, 0x2a, 0x36 },
// { 0x74, 0x48, 0x1e, 0x96, 0x46, 0xed, 0x49, 0xfe, 0x0f, 0x62, 0x24, 0x30, 0x16, 0x04, 0x69, 0x8e },
// { 0x57, 0xfc, 0xa5, 0xde, 0x98, 0xa9, 0xd6, 0xd8, 0x00, 0x64, 0x38, 0xd0, 0x58, 0x3d, 0x8a, 0x1d },
// { 0x9f, 0xec, 0xde, 0x1c, 0xef, 0xdc, 0x1c, 0xbe, 0xd4, 0x76, 0x36, 0x74, 0xd9, 0x57, 0x53, 0x59 },
// { 0xe3, 0x04, 0x0c, 0x00, 0xeb, 0x28, 0xf1, 0x53, 0x66, 0xca, 0x73, 0xcb, 0xd8, 0x72, 0xe7, 0x40 },
// { 0x76, 0x97, 0x00, 0x9a, 0x6a, 0x83, 0x1d, 0xfe, 0xcc, 0xa9, 0x1c, 0x59, 0x93, 0x67, 0x0f, 0x7a },
// { 0x58, 0x53, 0x54, 0x23, 0x21, 0xf5, 0x67, 0xa0, 0x05, 0xd5, 0x47, 0xa4, 0xf0, 0x47, 0x59, 0xbd },
// { 0x51, 0x50, 0xd1, 0x77, 0x2f, 0x50, 0x83, 0x4a, 0x50, 0x3e, 0x06, 0x9a, 0x97, 0x3f, 0xbd, 0x7c }


  //----------------------------------------------------------------
  // Internal constant and parameter definitions.
  //----------------------------------------------------------------
  parameter CLK_HALF_PERIOD = 2;


  //----------------------------------------------------------------
  // Register and Wire declarations.
  //----------------------------------------------------------------
  // Cycle counter.
  reg [31 : 0] cycle_ctr;

  // Clock and reset.
  reg tb_clk;
  reg tb_reset_n;

  // DUT connections.
  reg            tb_initalize;
  reg            tb_compress;
  reg            tb_finalize;
  reg            tb_long;
  reg [3 : 0]    tb_c;
  reg [3 : 0]    tb_d;
  reg [127 : 0]  tb_k;
  reg [63 : 0]   tb_mi;
  wire           tb_ready;
  wire [127 : 0] tb_siphash_word;
  wire           tb_siphash_word_valid;


  //----------------------------------------------------------------
  // siphash_core device under test.
  //----------------------------------------------------------------
  siphash_core dut(
                   // Clock and reset.
                   .clk(tb_clk),
                   .reset_n(tb_reset_n),

                   // Control
                   .initalize(tb_initalize),
                   .compress(tb_compress),
                   .finalize(tb_finalize),
                   .long(tb_long),

                   .c(tb_c),
                   .d(tb_d),
                   .k(tb_k),
                   .mi(tb_mi),

                   .ready(tb_ready),

                   .siphash_word(tb_siphash_word),
                   .siphash_word_valid(tb_siphash_word_valid)
                  );


  //----------------------------------------------------------------
  // clk_gen
  // Clock generator process.
  //----------------------------------------------------------------
  always
    begin : clk_gen
      #CLK_HALF_PERIOD tb_clk = !tb_clk;
    end // clk_gen


  //--------------------------------------------------------------------
  // dut_monitor
  // Monitor for observing the inputs and outputs to the dut.
  // Includes the cycle counter.
  //--------------------------------------------------------------------
  always @ (posedge tb_clk)
    begin : dut_monitor
      cycle_ctr = cycle_ctr + 1;

      $display("cycle = %8x:", cycle_ctr);
      // $display("v0_reg = %016x, v1_reg = %016x", dut.v0_reg, dut.v1_reg);
      // $display("v2_reg = %016x, v3_reg = %016x", dut.v2_reg, dut.v3_reg);
      // $display("loop_ctr = %02x, dp_state = %02x, fsm_state = %02x",
      // dut.loop_ctr_reg, dut.dp_state_reg, dut.siphash_ctrl_reg);
      // $display("");
    end // dut_monitor


  //----------------------------------------------------------------
  // dump_inputs
  // Dump the internal SIPHASH state to std out.
  //----------------------------------------------------------------
  task dump_inputs();
    begin
      $display("Inputs:");
      $display("init = %b, compress = %b, finalize = %b",
               tb_initalize, tb_compress, tb_finalize);
      $display("reset = %b, c = %02x, d = %02x, mi = %08x",
               tb_reset_n, tb_c, tb_d, tb_mi);
      $display("");
    end
  endtask // dump_inputs


  //----------------------------------------------------------------
  // dump_outputs
  // Dump the outputs from the SipHash to std out.
  //----------------------------------------------------------------
  task dump_outputs();
    begin
      $display("Outputs:");
      $display("ready = %d", tb_ready);
      $display("siphash_word = 0x%032x, valid = %d", tb_siphash_word, tb_siphash_word_valid);
      $display("");
    end
  endtask // dump_inputs


  //----------------------------------------------------------------
  // dump_state
  // Dump the internal SIPHASH state to std out.
  //----------------------------------------------------------------
  task dump_state();
    begin
      $display("Internal state:");
      $display("v0_reg = %016x, v1_reg = %016x", dut.v0_reg, dut.v1_reg);
      $display("v2_reg = %016x, v3_reg = %016x", dut.v2_reg, dut.v3_reg);
      $display("mi_reg = %016x", dut.mi_reg);
      $display("loop_ctr = %02x, dp_state = %02x, fsm_state = %02x",
               dut.loop_ctr_reg, dut.dp_state_reg, dut.siphash_ctrl_reg);
      $display("");
    end
  endtask // dump_state


  //----------------------------------------------------------------
  // siphash_core_test
  // The main test functionality.
  //----------------------------------------------------------------
  initial
    begin : siphash_core_test
      $display("   -- Testbench for siphash_core started --");

      // Set clock, reset and DUT input signals to
      // defined values at simulation start.
      tb_c         = 8'h02;
      tb_d         = 8'h04;
      tb_mi        = 64'h0000000000000000;
      tb_k         = 128'h00000000000000000000000000000000;
      tb_initalize = 0;
      tb_compress  = 0;
      tb_finalize  = 0;
      tb_long      = 0;

      cycle_ctr    = 0;
      tb_clk       = 0;
      tb_reset_n   = 0;
      dump_state();

      // Wait ten clock cycles and release reset.
      #(20 * CLK_HALF_PERIOD);
      @(negedge tb_clk)
      tb_reset_n = 1;
      dump_state();

      // Dump the state to check reset.
      #(4 * CLK_HALF_PERIOD);
      dump_state();
      dump_outputs();

      // Pull init flag for a cycle
      // We use the SipHash paper Appendix A key.
      #(20 * CLK_HALF_PERIOD);
      tb_k = 128'h0f0e0d0c0b0a09080706050403020100;
      tb_initalize = 1;
      #(2 * CLK_HALF_PERIOD);
      tb_initalize = 0;
      dump_outputs();

      // Add first block.
      #(2 * CLK_HALF_PERIOD);
      tb_compress = 1;
      tb_mi = 64'h0706050403020100;
      #(2 * CLK_HALF_PERIOD);
      tb_compress = 0;
      dump_state();
      dump_outputs();

      // Wait a number of cycle and
      // try and start the next iteration.
      #(100 * CLK_HALF_PERIOD);
      dump_outputs();
      tb_compress = 1;
      tb_mi = 64'h0f0e0d0c0b0a0908;
      #(2 * CLK_HALF_PERIOD);
      tb_compress = 0;
      dump_state();
      dump_outputs();

      // Wait a number of cycles and
      // and pull finalizaition.
      #(100 * CLK_HALF_PERIOD);
      dump_outputs();
      tb_finalize = 1;
      #(2 * CLK_HALF_PERIOD);
      tb_finalize = 0;
      dump_state();
      dump_outputs();

      // Wait some cycles.
      #(200 * CLK_HALF_PERIOD);
      $display("Processing done..");
      dump_state();
      dump_outputs();

      // Finish in style.
      $display("siphash_core simulation done.");
      $finish;
    end // siphash_core_test

endmodule // tb_siphash_core

//======================================================================
// EOF tb_siphash_core.v
//======================================================================
